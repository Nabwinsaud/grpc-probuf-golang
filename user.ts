// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Address } from "./address";

export const protobufPackage = "user";

export interface User {
  id: number;
  name: string;
  gender: User_Gender;
  address: Address | undefined;
  hobbies: string[];
  /** map<string,string> metadata = 19000; */
  metadata: { [key: string]: string };
}

export enum User_Gender {
  male = 0,
  female = 1,
  UNRECOGNIZED = -1,
}

export function user_GenderFromJSON(object: any): User_Gender {
  switch (object) {
    case 0:
    case "male":
      return User_Gender.male;
    case 1:
    case "female":
      return User_Gender.female;
    case -1:
    case "UNRECOGNIZED":
    default:
      return User_Gender.UNRECOGNIZED;
  }
}

export function user_GenderToJSON(object: User_Gender): string {
  switch (object) {
    case User_Gender.male:
      return "male";
    case User_Gender.female:
      return "female";
    case User_Gender.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface User_Address {
  zipcode: number;
  lineAddress: string;
}

export interface User_MetadataEntry {
  key: string;
  value: string;
}

function createBaseUser(): User {
  return { id: 0, name: "", gender: 0, address: undefined, hobbies: [], metadata: {} };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.gender !== 0) {
      writer.uint32(24).int32(message.gender);
    }
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(34).fork()).join();
    }
    for (const v of message.hobbies) {
      writer.uint32(50).string(v!);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      User_MetadataEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.hobbies.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          const entry8 = User_MetadataEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.metadata[entry8.key] = entry8.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      gender: isSet(object.gender) ? user_GenderFromJSON(object.gender) : 0,
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
      hobbies: globalThis.Array.isArray(object?.hobbies) ? object.hobbies.map((e: any) => globalThis.String(e)) : [],
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.gender !== 0) {
      obj.gender = user_GenderToJSON(message.gender);
    }
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.hobbies?.length) {
      obj.hobbies = message.hobbies;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.gender = object.gender ?? 0;
    message.address = (object.address !== undefined && object.address !== null)
      ? Address.fromPartial(object.address)
      : undefined;
    message.hobbies = object.hobbies?.map((e) => e) || [];
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseUser_Address(): User_Address {
  return { zipcode: 0, lineAddress: "" };
}

export const User_Address: MessageFns<User_Address> = {
  encode(message: User_Address, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.zipcode !== 0) {
      writer.uint32(8).int32(message.zipcode);
    }
    if (message.lineAddress !== "") {
      writer.uint32(18).string(message.lineAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_Address {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_Address();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.zipcode = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lineAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_Address {
    return {
      zipcode: isSet(object.zipcode) ? globalThis.Number(object.zipcode) : 0,
      lineAddress: isSet(object.lineAddress) ? globalThis.String(object.lineAddress) : "",
    };
  },

  toJSON(message: User_Address): unknown {
    const obj: any = {};
    if (message.zipcode !== 0) {
      obj.zipcode = Math.round(message.zipcode);
    }
    if (message.lineAddress !== "") {
      obj.lineAddress = message.lineAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_Address>, I>>(base?: I): User_Address {
    return User_Address.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_Address>, I>>(object: I): User_Address {
    const message = createBaseUser_Address();
    message.zipcode = object.zipcode ?? 0;
    message.lineAddress = object.lineAddress ?? "";
    return message;
  },
};

function createBaseUser_MetadataEntry(): User_MetadataEntry {
  return { key: "", value: "" };
}

export const User_MetadataEntry: MessageFns<User_MetadataEntry> = {
  encode(message: User_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: User_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User_MetadataEntry>, I>>(base?: I): User_MetadataEntry {
    return User_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User_MetadataEntry>, I>>(object: I): User_MetadataEntry {
    const message = createBaseUser_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
